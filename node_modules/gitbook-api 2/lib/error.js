'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * API error object.
 * @type {Class}
 */
var GitBookError = function (_Error) {
    _inherits(GitBookError, _Error);

    function GitBookError(message) {
        _classCallCheck(this, GitBookError);

        var _this = _possibleConstructorReturn(this, (GitBookError.__proto__ || Object.getPrototypeOf(GitBookError)).call(this, message));

        _this.name = _this.constructor.name;
        _this.message = message;
        _this.statusCode = 0;

        if (typeof Error.captureStackTrace === 'function') {
            Error.captureStackTrace(_this, _this.constructor);
        } else {
            _this.stack = new Error(message).stack;
        }
        return _this;
    }

    _createClass(GitBookError, [{
        key: 'code',
        get: function get() {
            return this.statusCode;
        }

        /**
         * Create an error object for a fetch response.
         * @param  {Response} response
         * @return {Promise<GitBookError>} rejected promise
         */

    }], [{
        key: 'createForResponse',
        value: function createForResponse(response) {
            return response.json().then(function (json) {
                var error = new GitBookError(json.error);
                error.statusCode = json.code || 0;
                error.response = response;

                return Promise.reject(error);
            });
        }
    }]);

    return GitBookError;
}(Error);

module.exports = GitBookError;